diff -ur d1x/main/game.c d1x.new/main/game.c
--- d1x/main/game.c	2006-08-22 07:37:31.000000000 +0200
+++ d1x.new/main/game.c	2006-08-22 07:26:50.000000000 +0200
@@ -552,7 +552,6 @@
 int			VR_render_width	= 0;
 int			VR_render_height	= 0;
 int			VR_render_mode		= VR_NONE;
-int			VR_compatible_menus	= 0;
 int			VR_low_res 			= 3;				// Default to low res
 int 			VR_show_hud = 1;
 int			VR_sensitivity     = 1;		// 0 - 2
@@ -1109,16 +1108,15 @@
 
 
 // Sets up the canvases we will be rendering to
-void game_init_render_buffers(u_int32_t screen_mode, int render_w, int render_h, int use_paging, int render_method, int compatible_menus )
+void game_init_render_buffers(u_int32_t screen_mode, int render_w, int render_h, int render_method)
 {
 	if (!VR_offscreen_buffer)	{
-		VR_use_paging 		= use_paging;
+		VR_use_paging 		= FindArg("-doublebuffer");
 
 		VR_screen_mode		= screen_mode;
-		VR_render_mode 	= render_method;
-		VR_render_width	= render_w;
+		VR_render_mode 		= render_method;
+		VR_render_width		= render_w;
 		VR_render_height	= render_h;
-		VR_compatible_menus = compatible_menus;
 
 		Game_window_w 		= render_w;
 		Game_window_h		= render_h;
@@ -1181,12 +1179,6 @@
 int set_screen_mode(int sm)
 {
 stop_time();
-#ifndef OGL //ogl needs Screen_mode set correctly, or menus do not work.
-	if ( (sm==SCREEN_MENU) && (Screen_mode==SCREEN_GAME) && VR_compatible_menus )	{
-		sm = SCREEN_GAME;
-	}
-#endif
-
 #ifdef EDITOR
 	if ( (sm==SCREEN_MENU) && (Screen_mode==SCREEN_EDITOR) )	{
 		gr_set_current_canvas( Canv_editor );
@@ -1194,7 +1186,11 @@
 	}
 #endif
 
-        if ( (Screen_mode == sm) && !((sm==SCREEN_GAME) && (grd_curscreen->sc_mode != Game_screen_mode) && (Screen_mode == SCREEN_GAME))) {
+	if ( (Screen_mode == sm) &&
+		!((sm==SCREEN_GAME) &&
+			(grd_curscreen->sc_mode != Game_screen_mode)) &&
+		!((sm==SCREEN_MENU) &&
+			(grd_curscreen->sc_mode != MENU_SCREEN_MODE)) ) {
 		gr_set_current_canvas( &VR_screen_pages[VR_current_page] );
 #ifdef OGL
 		ogl_set_screen_mode();
diff -ur d1x/main/game.h d1x.new/main/game.h
--- d1x/main/game.h	1999-11-21 14:00:08.000000000 +0100
+++ d1x.new/main/game.h	2006-08-22 07:14:59.000000000 +0200
@@ -435,7 +435,7 @@
 extern grs_canvas VR_screen_sub_pages[2];	//  Two sub pages of VRAM if paging is available
 extern grs_canvas *VR_offscreen_menu;		// The offscreen data buffer for menus
 
-void game_init_render_buffers (u_int32_t screen_mode, int render_max_w, int render_max_h, int use_paging, int render_method, int compatible_menus);
+void game_init_render_buffers (u_int32_t screen_mode, int render_max_w, int render_max_h, int render_method);
 extern int maxfps;
 extern int use_nice_fps;
 extern int Allow_primary_cycle;
diff -ur d1x/main/inferno.c d1x.new/main/inferno.c
--- d1x/main/inferno.c	2006-08-22 07:36:22.000000000 +0200
+++ d1x.new/main/inferno.c	2006-08-22 07:14:48.000000000 +0200
@@ -1329,13 +1329,9 @@
 //added on 12/14/98 by Matt Mueller - override res in d1x.ini with command line args
 		int i, argnum=INT_MAX;
 //end addition -MM
-                int vr_mode = VR_NONE;
-		int screen_compatible = 1;
-		int use_double_buffer = 0;
-
 //added/edited on 12/14/98 by Matt Mueller - override res in d1x.ini with command line args
 //added on 9/30/98 by Matt Mueller clean up screen mode code, and add higher resolutions
-#define SCREENMODE(X,Y,C) if ( (i=FindArg( "-" #X "x" #Y ))&&(i<argnum))  {argnum=i; screen_mode = SM( X , Y );if (Inferno_verbose) printf( "Using " #X "x" #Y " ...\n" );screen_width = X;screen_height = Y;use_double_buffer = 1;screen_compatible = C;}
+#define SCREENMODE(X,Y,C) if ( (i=FindArg( "-" #X "x" #Y ))&&(i<argnum))  {argnum=i; screen_mode = SM( X , Y );if (Inferno_verbose) printf( "Using " #X "x" #Y " ...\n" );screen_width = X;screen_height = Y;}
 //aren't #defines great? :)
 
 		SCREENMODE(320,100,0);
@@ -1353,21 +1349,10 @@
 		SCREENMODE(1600,1200,0);
 //end addition -MM
 		
-//added ifdefs on 9/30/98 by Matt Mueller to fix high res in linux
-#ifdef __MSDOS__
-		if ( FindArg( "-nodoublebuffer" ) )	{
-			if (Inferno_verbose) printf( "Double-buffering disabled...\n" );
-#endif
-			use_double_buffer = 0;
-#ifdef __MSDOS__
-                }
-#endif
-//end addition -MM
-
                 //added 3/24/99 by Owen Evans for screen res changing
                 Game_screen_mode = screen_mode;
                 //end added -OE
-                game_init_render_buffers(screen_mode, screen_width, screen_height, use_double_buffer, vr_mode, screen_compatible);
+                game_init_render_buffers(screen_mode, screen_width, screen_height, VR_NONE);
                 
 	}
 	{
diff -ur d1x/main/menu.c d1x.new/main/menu.c
--- d1x/main/menu.c	2006-08-22 07:36:37.000000000 +0200
+++ d1x.new/main/menu.c	2006-08-22 07:36:05.000000000 +0200
@@ -226,12 +226,6 @@
 
 	set_screen_mode (SCREEN_MENU);
 	
-	VR_screen_mode = Game_screen_mode = SM(VR_render_width,VR_render_height);
-
-	if (FindArg("-menu_gameres")) { // ZICO - set players resolution ofter player is selected
-		gr_set_mode(SM(VR_render_width,VR_render_height));
-		set_screen_mode(SCREEN_GAME);
-	}
 
 	ADD_ITEM(TXT_NEW_GAME,MENU_NEW_GAME,KEY_N);
 
@@ -909,8 +903,6 @@
 	u_int32_t modes[12];
 	int i = 0, mc = 0, num_presets = 0;
 	char customres[16];
-	int screen_compatible = 0;
-	int use_double_buffer = 0;
 #ifdef GR_SUPPORTS_FULLSCREEN_TOGGLE
  int fullscreenc;
 #endif
@@ -918,8 +910,6 @@
  u_int32_t screen_mode = 0;
  int screen_width = 0;
  int screen_height = 0;
- int vr_mode = VR_NONE;
-	int screen_flags = 0;
  
 	m[mc].type = NM_TYPE_RADIO; m[mc].text = "320x200"; m[mc].value = (Game_screen_mode == SM(320,200)); m[mc].group = 0; modes[mc] = SM(320,200); mc++;
 	m[mc].type = NM_TYPE_RADIO; m[mc].text = "640x480"; m[mc].value = (Game_screen_mode == SM(640,480)); m[mc].group = 0; modes[mc] = SM(640,480); mc++;
@@ -980,18 +970,15 @@
 	if (screen_height <= 0 || screen_width <= 0)
 		return;
 
-#ifdef __MSDOS__
-	if (FindArg("-nodoublebuffer"))
-#endif
-	{
-   use_double_buffer = 0;
-	}
+	if (Game_screen_mode == screen_mode)
+		return;
 
-        VR_offscreen_buffer = 0;        //Disable VR (so that VR_Screen_mode doesnt mess us up
+	/* Free VR_offscreen_buffer so that game_init_render_buffers
+	   recreates it. */
+	gr_free_canvas(VR_offscreen_buffer);
+	VR_offscreen_buffer = NULL;
         Game_screen_mode = screen_mode;
-        Game_window_w=screen_width;
-        Game_window_h=screen_height;
-        game_init_render_buffers(screen_mode, screen_width, screen_height, use_double_buffer, vr_mode, screen_compatible);
+        game_init_render_buffers(screen_mode, screen_width, screen_height, VR_NONE);
         
 
         mprintf( (0, "\nInitializing palette system..." ));
@@ -1005,7 +992,6 @@
   last_drawn_cockpit[0]=-1;
   last_drawn_cockpit[1]=-1;
    vr_reset_display();
-	set_screen_mode(SCREEN_GAME);
 }
 
 
diff -ur d1x/main/playsave.c d1x.new/main/playsave.c
--- d1x/main/playsave.c	2006-08-22 07:36:37.000000000 +0200
+++ d1x.new/main/playsave.c	2006-08-22 07:29:46.000000000 +0200
@@ -1394,10 +1394,19 @@
 		kc_set_controls();
 	}
 
-	Game_window_w = info.Game_window_w; // ZICO - read out saved pilot data
-	Game_window_h = info.Game_window_h;
-	VR_render_width =  info.Game_window_w;
-	VR_render_height =  info.Game_window_h;
+
+	if (Game_screen_mode != SM(info.Game_window_w,info.Game_window_h))
+	{
+		/* Free VR_offscreen_buffer so that game_init_render_buffers
+		   recreates it. */
+		gr_free_canvas(VR_offscreen_buffer);
+		VR_offscreen_buffer = NULL;
+		Game_screen_mode = SM(info.Game_window_w,info.Game_window_h);
+		game_init_render_buffers(
+			SM(info.Game_window_w,info.Game_window_h),
+			info.Game_window_w,
+			info.Game_window_h, VR_NONE);
+	}
 
 	return errno_ret;
 
