--- a/SConstruct
+++ b/SConstruct
@@ -310,7 +310,7 @@
 		# creates copies, so it is safe for the default value to be
 		# shared.
 		def __init__(self,env,keyviews,_l=[]):
-			self.flags = {k: env.get(k, _l)[:] for k in itertools.chain.from_iterable(keyviews)}
+			self.flags = {k: env.get(k, _l).copy() for k in itertools.chain.from_iterable(keyviews)}
 		def restore(self,env):
 			env.Replace(**self.flags)
 		def __getitem__(self,name):
@@ -1527,7 +1527,7 @@
 			# If joysticks are disabled, then disable all possible
 			# inputs.
 			user_settings.max_axes_per_joystick = user_settings.max_buttons_per_joystick = user_settings.max_hats_per_joystick = 0
-		successflags['CPPDEFINES'] = CPPDEFINES = successflags.get('CPPDEFINES', [])[:]
+		successflags['CPPDEFINES'] = CPPDEFINES = successflags.get('CPPDEFINES', []).copy()
 		# use Redbook if at least one of the following applies
 		#    1. we are on SDL1
 		#    2. we are building for a platform for which we have a custom CD implementation (currently only win32)
@@ -4528,7 +4528,7 @@
 		user_settings = self.user_settings
 		builddir = env.Dir(user_settings.builddir).Dir(self.srcdir)
 		for test in runtime_test_boost_tests:
-			LIBS = [] if test.nodefaultlibs else env['LIBS'][:]
+			LIBS = [] if test.nodefaultlibs else env['LIBS'].copy()
 			LIBS.append('boost_unit_test_framework')
 			env.Program(target=builddir.File(test.target), source=test.source(self), LIBS=LIBS)
 
@@ -4771,7 +4771,7 @@
 			# Bypass ccache, if any, since this is a preprocess only
 			# call.
 			kwargs['CXXFLAGS'] = (env['CXXFLAGS'] or []) + ['-E']
-			kwargs['CPPDEFINES'] = (env['CPPDEFINES'] or []) + [
+			kwargs['CPPDEFINES'] = list(env['CPPDEFINES'] or []) + [
 					# Define these tokens to themselves so that
 					# `#ifndef` does not try to redefine them.
 					('DXX_KCONFIG_UI_ENUM', 'DXX_KCONFIG_UI_ENUM'),
@@ -4791,7 +4791,7 @@
 	def _apply_target_name(self,name):
 		return os.path.join(os.path.dirname(name), '.%s.%s' % (self.target, os.path.splitext(os.path.basename(name))[0]))
 	def _apply_env_version_seq(self,env,_empty={}):
-		return _empty if self.user_settings.pch else {'CPPDEFINES' : env['CPPDEFINES'] + [('DXX_VERSION_SEQ', self.DXX_VERSION_SEQ)]}
+		return _empty if self.user_settings.pch else {'CPPDEFINES' : list(env['CPPDEFINES']) + [('DXX_VERSION_SEQ', self.DXX_VERSION_SEQ)]}
 	get_objects_similar_arch_ogl = DXXCommon.create_lazy_object_states_getter((LazyObjectState(sources=(
 'similar/arch/ogl/gr.cpp',
 'similar/arch/ogl/ogl.cpp',
@@ -4887,7 +4887,7 @@
 	), LazyObjectState(sources=(
 'similar/main/inferno.cpp',
 ),
-		transform_env = (lambda self, env: {'CPPDEFINES' : env['CPPDEFINES'] + env.__dxx_CPPDEFINE_SHAREPATH + env.__dxx_CPPDEFINE_git_version}),
+		transform_env = (lambda self, env: {'CPPDEFINES' : list(env['CPPDEFINES']) + env.__dxx_CPPDEFINE_SHAREPATH + env.__dxx_CPPDEFINE_git_version}),
 		transform_target=_apply_target_name,
 	), LazyObjectState(sources=(
 'similar/main/kconfig.cpp',
@@ -4897,7 +4897,7 @@
 	), LazyObjectState(sources=(
 'similar/misc/physfsx.cpp',
 ),
-		transform_env = (lambda self, env: {'CPPDEFINES' : env['CPPDEFINES'] + env.__dxx_CPPDEFINE_SHAREPATH}),
+		transform_env = (lambda self, env: {'CPPDEFINES' : list(env['CPPDEFINES']) + env.__dxx_CPPDEFINE_SHAREPATH}),
 		transform_target=_apply_target_name,
 	), LazyObjectState(sources=(
 'similar/main/playsave.cpp',
@@ -5108,7 +5108,7 @@
 			objects.extend(self.get_objects_editor())
 			objects.extend(static_archive_construction.get_objects_editor())
 		versid_build_environ = ['CXX', 'CPPFLAGS', 'CXXFLAGS', 'LINKFLAGS']
-		versid_cppdefines = env['CPPDEFINES'][:]
+		versid_cppdefines = env['CPPDEFINES'].copy()
 		extra_version = user_settings.extra_version
 		if extra_version is None:
 			extra_version = 'v%u.%u' % (self.VERSION_MAJOR, self.VERSION_MINOR)
@@ -5226,7 +5226,7 @@
 				env.Install(install_dir, exe_node)
 				env.Alias('install', install_dir)
 		else:
-			syspath = sys.path[:]
+			syspath = sys.path.copy()
 			cocoa = 'common/arch/cocoa'
 			sys.path += [cocoa]
 			import tool_bundle

