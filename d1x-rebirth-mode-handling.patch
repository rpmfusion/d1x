diff -urbB d1x/main/menu.c ../d1x-rebirth_v0.42-src-20060416/main/menu.c
--- d1x/main/menu.c	2000-03-06 02:42:10.000000000 +0100
+++ ../d1x-rebirth_v0.42-src-20060416/main/menu.c	2006-04-14 23:18:24.000000000 +0200
@@ -226,6 +226,12 @@
 
 	set_screen_mode (SCREEN_MENU);
 	
+	VR_screen_mode = Game_screen_mode = SM(VR_render_width,VR_render_height);
+
+	if (FindArg("-menu_gameres")) { // ZICO - set players resolution ofter player is selected
+		gr_set_mode(SM(VR_render_width,VR_render_height));
+		set_screen_mode(SCREEN_GAME);
+	}
 
 	ADD_ITEM(TXT_NEW_GAME,MENU_NEW_GAME,KEY_N);
 
@@ -898,10 +905,13 @@
 
 void change_res()
 {
- //edited 05/27/99 Matt Mueller - ingame fullscreen changing
- newmenu_item m[8];
- u_int32_t modes[8];
- int i=0, mc=0;
+	// edited 05/27/99 Matt Mueller - ingame fullscreen changing
+	newmenu_item m[12]; // ZICO - from 11 to 12 to be sure...
+	u_int32_t modes[12];
+	int i = 0, mc = 0, num_presets = 0;
+	char customres[16];
+	int screen_compatible = 0;
+	int use_double_buffer = 0;
 #ifdef GR_SUPPORTS_FULLSCREEN_TOGGLE
  int fullscreenc;
 #endif
@@ -910,107 +920,73 @@
  int screen_width = 0;
  int screen_height = 0;
  int vr_mode = VR_NONE;
- int screen_compatible = 0;
- int use_double_buffer = 0;
+	int screen_flags = 0;
  
-//changed 6/15/1999 by Owen Evans to fix some platform-related problems
-#ifdef __MSDOS__
- m[mc].type = NM_TYPE_RADIO; m[mc].text = "320x100"; m[mc].value=(Game_screen_mode==SM(320,100)); m[mc].group=0; modes[mc] = SM(320,100); mc++;
-#endif
- m[mc].type = NM_TYPE_RADIO; m[mc].text = "320x200"; m[mc].value=(Game_screen_mode==SM(320,200)); m[mc].group=0; modes[mc] = SM(320,200); mc++;
- m[mc].type = NM_TYPE_RADIO; m[mc].text = "320x240"; m[mc].value=(Game_screen_mode==SM(320,240)); m[mc].group=0; modes[mc] = SM(320,240); mc++;
- m[mc].type = NM_TYPE_RADIO; m[mc].text = "320x400"; m[mc].value=(Game_screen_mode==SM(320,400)); m[mc].group=0; modes[mc] = SM(320,400); mc++;
-//#ifndef __LINUX__ - heh?  640x400 is perfectly fine on linux
- m[mc].type = NM_TYPE_RADIO; m[mc].text = "640x400"; m[mc].value=(Game_screen_mode==SM(640,400)); m[mc].group=0; modes[mc] = SM(640,400); mc++;
-//#endif
- m[mc].type = NM_TYPE_RADIO; m[mc].text = "640x480"; m[mc].value=(Game_screen_mode==SM(640,480)); m[mc].group=0; modes[mc] = SM(640,480); mc++;
- m[mc].type = NM_TYPE_RADIO; m[mc].text = "800x600"; m[mc].value=(Game_screen_mode==SM(800,600)); m[mc].group=0; modes[mc] = SM(800,600); mc++;
- m[mc].type = NM_TYPE_RADIO; m[mc].text = "1024x768"; m[mc].value=(Game_screen_mode==SM(1024,768)); m[mc].group=0; modes[mc] = SM(1024,768); mc++;
-//end section - OE
+	m[mc].type = NM_TYPE_RADIO; m[mc].text = "320x200"; m[mc].value = (Game_screen_mode == SM(320,200)); m[mc].group = 0; modes[mc] = SM(320,200); mc++;
+	m[mc].type = NM_TYPE_RADIO; m[mc].text = "640x480"; m[mc].value = (Game_screen_mode == SM(640,480)); m[mc].group = 0; modes[mc] = SM(640,480); mc++;
+	m[mc].type = NM_TYPE_RADIO; m[mc].text = "320x400"; m[mc].value = (Game_screen_mode == SM(320,400)); m[mc].group = 0; modes[mc] = SM(320,400); mc++;
+	m[mc].type = NM_TYPE_RADIO; m[mc].text = "640x400"; m[mc].value = (Game_screen_mode == SM(640,400)); m[mc].group = 0; modes[mc] = SM(640,400); mc++;
+	m[mc].type = NM_TYPE_RADIO; m[mc].text = "800x600"; m[mc].value = (Game_screen_mode == SM(800,600)); m[mc].group = 0; modes[mc] = SM(800,600); mc++;
+	m[mc].type = NM_TYPE_RADIO; m[mc].text = "1024x768"; m[mc].value = (Game_screen_mode == SM(1024,768)); m[mc].group = 0; modes[mc] = SM(1024,768); mc++;
+	m[mc].type = NM_TYPE_RADIO; m[mc].text = "1280x1024"; m[mc].value = (Game_screen_mode == SM(1280,1024)); m[mc].group = 0; modes[mc] = SM(1280,1024); mc++;
+	m[mc].type = NM_TYPE_RADIO; m[mc].text = "1600x1200"; m[mc].value = (Game_screen_mode == SM(1600,1200)); m[mc].group = 0; modes[mc] = SM(1600,1200); mc++; // ZICO - added res
 
-// m[mc].type = NM_TYPE_CHECK; m[mc].text = "No Doublebuffer"; m[mc].value = use_double_buffer;
+	num_presets = mc;
+	for (i = 0; i < mc; i++)
+		if (m[mc].value)
+			break;
 
- //added 05/27/99 Matt Mueller - ingame fullscreen changing
+	m[mc].type = NM_TYPE_RADIO; m[mc].text = "custom:"; m[mc].value = (i == mc); m[mc].group = 0; modes[mc] = 0; mc++;
+	sprintf(customres, "%ix%i", SM_W(Game_screen_mode), SM_H(Game_screen_mode));
+	m[mc].type = NM_TYPE_INPUT; m[mc].text = customres; m[mc].text_len = 11; modes[mc] = 0; mc++;
+
+	//m[mc].type = NM_TYPE_CHECK; m[mc].text = "No Doublebuffer"; m[mc].value = use_double_buffer;
+
+	// added 05/27/99 Matt Mueller - ingame fullscreen changing
 #ifdef GR_SUPPORTS_FULLSCREEN_TOGGLE
- fullscreenc=mc;m[mc].type = NM_TYPE_CHECK; m[mc].text = "Fullscreen"; m[mc].value = gr_check_fullscreen();mc++;
+	fullscreenc = mc; m[mc].type = NM_TYPE_CHECK; m[mc].text = "Fullscreen"; m[mc].value = gr_check_fullscreen(); mc++;
 #endif
- //end addition -MM
+	// end addition -MM
 
 
-   i=newmenu_do1( NULL, "Screen Resolution", mc, m, &change_res_poll, i);
+	i = newmenu_do1(NULL, "Screen Resolution", mc, m, &change_res_poll, 0);
 
-  //added 05/27/99 Matt Mueller - ingame fullscreen changing
+	// added 05/27/99 Matt Mueller - ingame fullscreen changing
 #ifdef GR_SUPPORTS_FULLSCREEN_TOGGLE
-   if (m[fullscreenc].value != gr_check_fullscreen()){
+	if (m[fullscreenc].value != gr_check_fullscreen())
+	{
 	   gr_toggle_fullscreen();
         Game_screen_mode = -1;
    }
 #endif
-  //end addition -MM
    
-  for(i=0;(m[i].value==0)&&(i<6);i++);
+	for (i = 0; (m[i].value == 0) && (i < num_presets); i++);
 
-  switch(screen_mode = modes[i])
+	for(i = 0; (m[i].value == 0) && (i < num_presets); i++);
+
+	if (modes[i]==0)
    {
-    case SM(320,100)://19:
-           screen_width = 320;
-           screen_height = 100;
-           screen_compatible = 0;
-           use_double_buffer = 0;
-           break;
-	case SM(320,200)://SM_320x200C:
-           screen_width = 320;
-           screen_height = 200;
-           screen_compatible = 1;
-           use_double_buffer = 0;
-           break;
-	case SM(320,240)://SM_320x240U:
-           screen_width = 320;
-           screen_height = 240;
-           screen_compatible = 0;
-           use_double_buffer = 1;
-           break;
-	case SM(320,400)://SM_320x400U:
-           screen_width = 320;
-           screen_height = 400;
-           screen_compatible = 0;
-           use_double_buffer = 1;
-           break;
-	case SM(640,400)://SM_640x400V:
-           screen_width = 640;
-           screen_height = 400;
-           screen_compatible = 0;
-           use_double_buffer = 1;
-           break;
-	case SM(640,480)://SM_640x480V:
-           screen_width = 640;
-           screen_height = 480;
-           screen_compatible = 0;
-           use_double_buffer = 1;
-           break;
-	case SM(800,600)://SM_800x600V:
-           screen_width = 800;
-           screen_height = 600;
-           screen_compatible = 0;
-           use_double_buffer = 1;
-           break;
-	case SM(1024,768)://SM_1024x768V:
-           screen_width = 1024;
-           screen_height = 768;
-           screen_compatible = 0;
-           use_double_buffer = 1;
-           break;
+		char *h = strchr(customres, 'x');
+		if (!h)
+			return;
+		screen_mode = SM(atoi(customres), atoi(h+1));
    }
+	else
+	{
+		screen_mode = modes[i];
+	}
+
+	screen_width = SM_W(screen_mode);
+	screen_height = SM_H(screen_mode);
+	if (screen_height <= 0 || screen_width <= 0)
+		return;
+
 #ifdef __MSDOS__
-  if ( FindArg( "-nodoublebuffer" ) )
+	if (FindArg("-nodoublebuffer"))
 #endif
+	{
    use_double_buffer = 0;
-
-//added 6/15/1999 by Owen Evans to eliminate unneccesary mode modification
-	if (Game_screen_mode == screen_mode)
-		return;
-//      gr_set_mode(Game_screen_mode);
-//end section - OE
+	}
 
         VR_offscreen_buffer = 0;        //Disable VR (so that VR_Screen_mode doesnt mess us up
         Game_screen_mode = screen_mode;
@@ -1029,11 +1003,9 @@
   init_cockpit();
   last_drawn_cockpit[0]=-1;
   last_drawn_cockpit[1]=-1;
-//  init_gauges();
-
    vr_reset_display();
+	set_screen_mode(SCREEN_GAME);
 }
-//End changed section (OE)
 
 
 //added on 8/18/98 by Victor Rachels to add d1x options menu, maxfps setting
diff -urbB d1x/main/playsave.c ../d1x-rebirth_v0.42-src-20060416/main/playsave.c
--- d1x/main/playsave.c	2006-08-19 11:33:19.000000000 +0200
+++ ../d1x-rebirth_v0.42-src-20060416/main/playsave.c	2006-03-26 12:51:56.000000000 +0200
@@ -294,6 +297,8 @@
 	int	n_highest_levels;				//how many highest levels are saved
 	int	default_difficulty_level;
 	int	default_leveling_on;
+	int	Game_window_w;
+	int	Game_window_h;
 } __pack__ save_info;
 
 typedef struct hli {
@@ -1220,6 +1225,9 @@
 
 }
 
+	extern int screen_width;
+	extern int screen_height;
+
 //read in the player's saved games.  returns errno (0 == no error)
 int read_player_file()
 {
@@ -1388,6 +1396,12 @@
 	if (errno_ret==EZERO)	{
 		kc_set_controls();
 	}
+
+	Game_window_w = info.Game_window_w; // ZICO - read out saved pilot data
+	Game_window_h = info.Game_window_h;
+	VR_render_width =  info.Game_window_w;
+	VR_render_height =  info.Game_window_h;
+
 	return errno_ret;
 
 }
@@ -1474,6 +1488,8 @@
 	info.player_struct_version = PLAYER_STRUCT_VERSION;
 	info.default_difficulty_level = Player_default_difficulty;
 	info.default_leveling_on = Auto_leveling_on;
+	info.Game_window_w = Game_window_w;
+	info.Game_window_h = Game_window_h;
 
 	info.n_highest_levels = n_highest_levels;
 
