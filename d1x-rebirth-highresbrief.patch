diff -urbB d1x/main/titles.c ../d1x-rebirth_v0.42-src-20060416/main/titles.c
--- d1x/main/titles.c	2006-08-19 11:33:19.000000000 +0200
+++ ../d1x-rebirth_v0.42-src-20060416/main/titles.c	2006-03-27 18:20:10.000000000 +0200
@@ -319,7 +144,7 @@
 }
 
 typedef struct {
-	char	bs_name[14];						//	filename, eg merc01.  Assumes .lbm suffix.
+	char	bs_name[255]; // filename, eg merc01.  Assumes .lbm suffix.
 	byte	level_num;
 	byte	message_num;
 	short	text_ulx, text_uly;		 	//	upper left x,y of text window
@@ -403,8 +219,70 @@
 
 };
 
-#define	MAX_BRIEFING_SCREEN	(sizeof(Briefing_screens) / sizeof(Briefing_screens[0]))
+briefing_screen Briefing_screens_h[] = { // ZICO - added for hires screens
+	{ "brief01h.pcx",   0,  1,  13, 140, 290,  59 },
+	{ "brief02h.pcx",   0,  2,  27,  34, 257, 177 },
+	{ "brief03h.pcx",   0,  3,  20,  22, 257, 177 },
+	{ "brief02h.pcx",   0,  4,  27,  34, 257, 177 },
+
+	{ "moon01h.pcx",    1,  5,  10,  10, 300, 170 },	// level 1
+	{ "moon01h.pcx",    2,  6,  10,  10, 300, 170 },	// level 2
+	{ "moon01h.pcx",    3,  7,  10,  10, 300, 170 },	// level 3
+
+	{ "venus01h.pcx",   4,  8,  15,  15, 300, 200 },	// level 4
+	{ "venus01h.pcx",   5,  9,  15,  15, 300, 200 },	// level 5
+
+	{ "brief03h.pcx",   6, 10,  20,  22, 257, 177 },
+	{ "merc01h.pcx",    6, 11,  10,  15, 300, 200 },	// level 6
+	{ "merc01h.pcx",    7, 12,  10,  15, 300, 200 },	// level 7
 
+#ifndef SHAREWARE
+	{ "brief03h.pcx",   8, 13,  20,  22, 257, 177 },
+	{ "mars01h.pcx",    8, 14,  10, 100, 300, 200 },	// level 8
+	{ "mars01h.pcx",    9, 15,  10, 100, 300, 200 },	// level 9
+	{ "brief03h.pcx",  10, 16,  20,  22, 257, 177 },
+	{ "mars01h.pcx",   10, 17,  10, 100, 300, 200 },	// level 10
+
+	{ "jup01h.pcx",    11, 18,  10,  40, 300, 200 },	// level 11
+	{ "jup01h.pcx",    12, 19,  10,  40, 300, 200 },	// level 12
+	{ "brief03h.pcx",  13, 20,  20,  22, 257, 177 },
+	{ "jup01h.pcx",    13, 21,  10,  40, 300, 200 },	// level 13
+	{ "jup01h.pcx",    14, 22,  10,  40, 300, 200 },	// level 14
+
+	{ "saturn01h.pcx", 15, 23,  10,  40, 300, 200 },	// level 15
+	{ "brief03h.pcx",  16, 24,  20,  22, 257, 177 },
+	{ "saturn01h.pcx", 16, 25,  10,  40, 300, 200 },	// level 16
+	{ "brief03h.pcx",  17, 26,  20,  22, 257, 177 },
+	{ "saturn01h.pcx", 17, 27,  10,  40, 300, 200 },	// level 17
+
+	{ "uranus01h.pcx", 18, 28, 100, 100, 300, 200 },	// level 18
+	{ "uranus01h.pcx", 19, 29, 100, 100, 300, 200 },	// level 19
+	{ "uranus01h.pcx", 20, 30, 100, 100, 300, 200 },	// level 20
+	{ "uranus01h.pcx", 21, 31, 100, 100, 300, 200 },	// level 21
+
+	{ "neptun01h.pcx", 22, 32,  10,  20, 300, 200 },	// level 22
+	{ "neptun01h.pcx", 23, 33,  10,  20, 300, 200 },	// level 23
+	{ "neptun01h.pcx", 24, 34,  10,  20, 300, 200 },	// level 24
+
+	{ "pluto01h.pcx",  25, 35,  10,  20, 300, 200 },	// level 25
+	{ "pluto01h.pcx",  26, 36,  10,  20, 300, 200 },	// level 26
+	{ "pluto01h.pcx",  27, 37,  10,  20, 300, 200 },	// level 27
+
+	{ "aster01h.pcx",  -1, 38,  10, 90, 300,  200 },	// secret level -1
+	{ "aster01h.pcx",  -2, 39,  10, 90, 300,  200 },	// secret level -2
+	{ "aster01h.pcx",  -3, 40,  10, 90, 300,  200 }, 	// secret level -3
+#endif
+
+	{ "end01h.pcx",   SHAREWARE_ENDING_LEVEL_NUM,   1,  23, 40, 320, 200 }, 	// shareware end
+#ifndef SHAREWARE
+	{ "end02h.pcx",   REGISTERED_ENDING_LEVEL_NUM,  1,   5,  5, 300, 200 }, 	// registered end
+	{ "end01h.pcx",   REGISTERED_ENDING_LEVEL_NUM,  2,  23, 40, 320, 200 }, 	// registered end
+	{ "end03h.pcx",   REGISTERED_ENDING_LEVEL_NUM,  3,   5,  5, 300, 200 }, 	// registered end
+#endif
+
+};
+
+#define	MAX_BRIEFING_SCREEN (sizeof(Briefing_screens) / sizeof(Briefing_screens[0]))
 
 char * get_briefing_screen( int level_num )
 {
@@ -409,10 +287,14 @@
 char * get_briefing_screen( int level_num )
 {
 	int i, found_level=0, last_level=0;
-
 	for (i = 0; i < MAX_BRIEFING_SCREEN; i++)	{
+		if (SWIDTH >= 640 && cfexist(D1XDATAPATH "brief01h.pcx")) {
+			if ( found_level && Briefing_screens_h[i].level_num != level_num )
+				return Briefing_screens_h[last_level].bs_name;
+		} else {
 		if ( found_level && Briefing_screens[i].level_num != level_num )
 			return Briefing_screens[last_level].bs_name;
+		}
 		if (Briefing_screens[i].level_num == level_num )	{
 			found_level=1;
 			last_level = i;
@@ -446,6 +329,7 @@
 {
         grs_canvas      *curcanv_save, *bitmap_canv=0;
 	grs_bitmap	*bitmap_ptr;
+	int c0, c1;
 
 	//	Only plot every nth frame.
 	if (Door_div_count) {
@@ -465,13 +349,17 @@
 			New_pal[254*3] = 0;
 			New_pal[254*3+1] = 0;
 			New_pal[254*3+2] = 0;
-			gr_palette_load( New_pal );
-//                        vfx_set_palette_sub( New_pal );
+		}
+
+	if (SWIDTH >= 640 && cfexist(D1XDATAPATH "brief01h.pcx")) {
+		c0=0;c1=0;
+	} else {
+		c0=64;c1=94;
 		}
 
 		switch (Animating_bitmap_type) {
-			case 0:	bitmap_canv = gr_create_sub_canvas(grd_curcanv, rescale_x(220), rescale_y(45), 64, 64);	break;
-			case 1:	bitmap_canv = gr_create_sub_canvas(grd_curcanv, rescale_x(220), rescale_y(45), 94, 94);	break;	//	Adam: Change here for your new animating bitmap thing. 94, 94 are bitmap size.
+		case 0:		bitmap_canv = gr_create_sub_canvas(grd_curcanv, rescale_x(220), rescale_y(45), c0, c0);	break;
+		case 1:		bitmap_canv = gr_create_sub_canvas(grd_curcanv, rescale_x(220), rescale_y(45), c1, c1);	break; // Adam: Change here for your new animating bitmap thing. 94, 94 are bitmap size.
 			default:	Int3();	//	Impossible, illegal value for Animating_bitmap_type
 		}
 
@@ -549,7 +435,13 @@
 {
 	grs_canvas	*curcanv_save, *bitmap_canv;
 
-	bitmap_canv = gr_create_sub_canvas(grd_curcanv, 220, 45, 166, 138);
+	if (SWIDTH >= 640 && cfexist(D1XDATAPATH "brief01h.pcx")) // ZICO - use hires if available
+	{
+		bitmap_canv = gr_create_sub_canvas(grd_curcanv, 0, 0, 0, 0);
+	} else {
+		bitmap_canv = gr_create_sub_canvas(grd_curcanv, 220*((double)SWIDTH/320), 45*((double)SHEIGHT/200), 166, 138);
+	}
+
 	curcanv_save = grd_curcanv;
 	grd_curcanv = bitmap_canv;
 	gr_bitmapm(0, 0, bmp);
@@ -662,14 +546,20 @@
 int load_briefing_screen( int screen_num )
 {
 	int	pcx_error;
-
+	if (SWIDTH >= 640 && cfexist(D1XDATAPATH "brief01h.pcx")) // ZICO - use hires if available
+	{
+		if ((pcx_error=pcx_read_fullscr( Briefing_screens_h[screen_num].bs_name, New_pal ))!=PCX_ERROR_NONE) {
+			printf( "File '%s', PCX load error: %s\n  (It's a briefing screen.  Does this cause you pain?)\n",Briefing_screens_h[screen_num].bs_name, pcx_errormsg(pcx_error));
+			Int3();
+			return 0;
+		}
+	} else {
 	if ((pcx_error=pcx_read_fullscr( Briefing_screens[screen_num].bs_name, New_pal ))!=PCX_ERROR_NONE) {
 		printf( "File '%s', PCX load error: %s\n  (It's a briefing screen.  Does this cause you pain?)\n",Briefing_screens[screen_num].bs_name, pcx_errormsg(pcx_error));
-		//printf(0, "File '%s', PCX load error: %s (%i)\n  (It's a briefing screen.  Does this cause you pain?)\n",Briefing_screens[screen_num].bs_name, pcx_errormsg(pcx_error), pcx_error); // adb: huh?
 		Int3();
 		return 0;
 	}
-
+	}
 	return 0;
 }
 
@@ -1133,6 +1010,16 @@
 	}
 
 	gr_init_bitmap_data (&briefing_bm);
+
+	if (SWIDTH >= 640 && cfexist(D1XDATAPATH "brief01h.pcx")) // ZICO - use hires if available
+	{
+		if ((pcx_error=pcx_read_bitmap( Briefing_screens_h[screen_num].bs_name, &briefing_bm, BM_LINEAR, New_pal ))!=PCX_ERROR_NONE) {
+			printf( "PCX load error: %s.  File '%s'\n\n", pcx_errormsg(pcx_error), Briefing_screens_h[screen_num].bs_name);
+			mprintf((0, "File '%s', PCX load error: %s (%i)\n  (It's a briefing screen.  Does this cause you pain?)\n",Briefing_screens_h[screen_num].bs_name, pcx_errormsg(pcx_error), pcx_error));
+		Int3();
+		return 0;
+		}
+	} else {
 	if ((pcx_error=pcx_read_bitmap( Briefing_screens[screen_num].bs_name, &briefing_bm, BM_LINEAR, New_pal ))!=PCX_ERROR_NONE) {
 		printf( "PCX load error: %s.  File '%s'\n\n", pcx_errormsg(pcx_error), Briefing_screens[screen_num].bs_name);
 		mprintf((0, "File '%s', PCX load error: %s (%i)\n  (It's a briefing screen.  Does this cause you pain?)\n",Briefing_screens[screen_num].bs_name, pcx_errormsg(pcx_error), pcx_error));
@@ -1140,17 +1027,19 @@
 		return 0;
 	}
 
-//        vfx_set_palette_sub( New_pal );
+	}
+
 #ifdef OGL
 	gr_palette_load(New_pal);
 #else
 	gr_palette_clear();
 #endif
+	gr_clear_canvas(BM_RGB(0,255,255));
         show_fullscr(&briefing_bm );
 
-        //added on 9/13/98 by adb to make arch's requiring updates work
+//added on 9/13/98 by adb to make arch's requiring updates work
         gr_update();
-        //end changes by adb
+//end changes by adb
         
 	gr_free_bitmap_data (&briefing_bm);
 
